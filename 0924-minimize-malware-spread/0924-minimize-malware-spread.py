class Solution(object):
    def minMalwareSpread(self, graph, initial):
        def find(x):
            if x != parents[x]:
                parents[x] = find(parents[x])
            return parents[x]
        def union(x, y):
            parents[find(x)] = find(y)
        n = len(graph)
        parents = list(range(n))
        for i in range(n):
            for j in range(i + 1, n):
                if graph[i][j] == 1:
                    union(i, j)
        union = collections.Counter(find(i) for i in range(n))
        malware = collections.Counter(find(i) for i in initial)
        
        return min(initial, key=lambda x: [(malware[find(x)] == 1) * -union[find(x)], x])